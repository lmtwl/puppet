#最大化I / O吞吐量
#CPU绑定任务的最小抢占粒度：
#（默认值：1毫秒#（1 + ilog（ncpus）），单位：纳秒）
kernel.sched_min_granularity_ns = 10000000

#SCHED_OTHER唤醒粒度。
#（默认值：1毫秒#（1 + ilog（ncpus）），单位：纳秒）
#
#此选项延迟了去耦工作负载的抢占效应
#并减少其过度计划。同步工作负载仍将
#具有立即唤醒/睡眠延迟。
kernel.sched_wakeup_granularity_ns = 15000000

  
#启用IPv4转发
net.ipv4.ip_forward = 1

#禁用路径MTU发现。禁用路径MTU发现。如果在模式1中启用，并且接收到需要碎片的ICMP，则此目标的PMTU将设置为min_pmtu（请参见下文）。
net.ipv4.ip_no_pmtu_disc = 1

#关闭路由反向过滤
#net.ipv4.conf.all.rp_filter=0
net.ipv4.conf.all.rp_filter = 2
net.ipv4.conf.all.arp_filter = 1
net.ipv4.conf.all.arp_ignore = 1


#设置发现的最小路径MTU，默认522
#net.ipv4.route.min_pmtu = 1024

#最大系统V IPC消息大小，以字节为单位。
#默认（8192）
kernel.msgmax = 8192

#系统V IPC系统范围信号灯标识符的数量。
kernel.sem = 250 256000 32 1024

#单个System V IPC消息队列上的最大字节数。
kernel.msgmnb = 65536

#显示系统范围内可能的最大线程数。
kernel.threads-max = 131072 

#每个进程中允许的最大线程数。
#kernel.max_thread_proc = 20480

#增加文件句柄和inode缓存的大小
fs.file-max = 2097152

#减少交换
vm.swappiness = 10
vm.dirty_ratio = 60
vm.dirty_background_ratio = 2

#设置内核考虑将进程迁移到另一个内核之前的时间
kernel.sched_migration_cost_ns = 5000000

#按TTY分组任务
#kernel.sched_autogroup_enabled = 0

###通用网络安全选项###

#被动TCP连接的SYNACK次数。
net.ipv4.tcp_synack_retries = 8

#允许的本地端口范围
net.ipv4.ip_local_port_range = 11000 65535

#防止TCP时间等待
net.ipv4.tcp_rfc1337 = 1

#控制Syncookies
net.ipv4.tcp_syncookies = 1

#降低tcp_fin_timeout连接的时间默认值
net.ipv4.tcp_fin_timeout = 30

#降低连接保持活动的时间默认值
net.ipv4.tcp_keepalive_intvl = 30
net.ipv4.tcp_keepalive_probes = 3
net.ipv4.tcp_keepalive_time = 1200

#能接受SYN同步包的最大客户端数量，即半连接上限
net.ipv4.tcp_max_syn_backlog = 10240

#启用RFC 1323定义的window scaling，要支持超过64KB的TCP窗口，必须启用该值（1表示启用），TCP窗口最大至1GB，TCP连接双方都启用时才生效。
net.ipv4.tcp_window_scaling = 1

#管理TCP的选择性应答，允许接收端向发送端传递关于字节流中丢失的序列号，减少了段丢失时需要重传的段数目，当段丢失频繁时，sack是很有益的。
#net.ipv4.tcp_sack = 1

#这个参数表示操作系统允许TIME_WAIT套接字数量的较大值，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息。
net.ipv4.tcp_max_tw_buckets = 5000

#启用这项内核功能可以让操作系统根据网络状况自动的调节 MTU 大小，从而在性能与稳定性之间找到一个微妙的平衡
net.ipv4.tcp_mtu_probing = 1

#将发现中使用的起始MSS从默认的512字节更改为RFC4821建议的1,024
net.ipv4.tcp_base_mss = 1024

#默认套接字接收缓冲区
net.core.rmem_default = 31457280

#最大套接字接收缓冲区
net.core.rmem_max = 26214400

#默认套接字发送缓冲区
net.core.wmem_default = 31457280

#最大套接字发送缓冲区
net.core.wmem_max = 1048576

#增加传入连接数
net.core.somaxconn = 65535

#增加传入连接积压的数量
net.core.netdev_max_backlog = 65536

#增加选项内存缓冲区的最大数量
net.core.optmem_max = 25165824

#conntrack最大跟踪连接数
#net.netfilter.nf_conntrack_max=9553600
#net.nf_conntrack_max=9553600
#net.netfilter.nf_conntrack_tcp_timeout_established = 3600

#增加最大可分配的总缓冲区空间
#以页为单位（4096字节）进行度量
net.ipv4.tcp_mem = 786432 2097152 3145728
net.ipv4.udp_mem = 65536 131072 262144

#增加可分配的读取缓冲区空间
net.ipv4.tcp_rmem = 8760 256960 4088000
net.ipv4.udp_rmem_min = 16384


#增加可分配的写缓冲区空间
net.ipv4.tcp_wmem = 4096 8096 16777216
net.ipv4.udp_wmem_min = 16384
net.core.netdev_max_backlog = 400000

#关闭系统时间戳,防止TCP乱序
net.ipv4.tcp_timestamps = 0
#net.ipv4.tcp_syn_retries = 0
#net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_tw_reuse = 0

#开启BBR.(htcp)
#net.core.default_qdisc = fq
#net.ipv4.tcp_congestion_control = bbr
#net.ipv4.tcp_congestion_control = htcp

#开启TCPFASTOPEN
#net.ipv4.tcp_fastopen = 3

#旨在优先考虑低延迟而不是较高的吞吐量；设置= 1禁用IPV4 TCP预队列处理
net.ipv4.tcp_low_latency = 1

#IPV4数据包可以在TCP数据包流中重新排序的最大时间，而无需TCP假设数据包丢失并进入缓慢启动
net.ipv4.tcp_reordering = 3

#禁止Tcp空闲后慢启动
net.ipv4.tcp_slow_start_after_idle = 0

#把TCP的直接拥塞通告(tcp_ecn)关掉
net.ipv4.tcp_ecn = 0

#这将确保随后的连接立即使用这些值。 
net.ipv4.route.flush = 1

# turn on TCP Fast Open on both client and server side
#net.ipv4.tcp_fastopen = 3

net.ipv4.tcp_fastopen = 3
net.ipv4.igmp_max_memberships = 1024
